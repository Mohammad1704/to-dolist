{"version":3,"sources":["logo.svg","todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Todo","state","checked","checkedTask","_this","setState","console","log","_this2","this","react_default","a","createElement","onClick","className","props","todo","text","event","deleteTask","index","Component","App","addForm","list","updateForm","copy","Object","assign","target","name","value","submitTask","preventDefault","slice","push","clearlist","splice","todoList","map","num","Math","round","length","part","isNewPart","src_todo","rel","href","onSubmit","type","placeholder","onFocus","onChange","class","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55db0428.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nclass Todo extends Component {\n\n    state = {\n        checked: 'false'\n    }\n    \n    checkedTask = () =>{\n        if (this.state.checked === 'false'){\n            this.setState({checked:'done'})\n        }else{\n            this.setState({checked:'false'})\n        }\n        console.log(this.state.checked)\n    }\n    \n    \nrender(){\n    return (\n            <div>\n                <li> \n                    <span onClick={this.checkedTask} >◌</span>\n                    <span className={this.state.checked} > {this.props.todo.text}  </span>  \n                    <im  onClick={(event) => {this.props.deleteTask(this.props.index) ; this.setState({checked:'false'})} } />\n                </li>\n            </div>\n    )\n}\n\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './button.css';\nimport './paper.scss';\nimport Todo from './todo.js'\nclass App extends Component {\n\n  state = {\n    addForm:{\n          text:''\n           },\n\n            list : []\n\n\n  }\n\n  updateForm = (event) => {\n    const copy = Object.assign({}, this.state.addForm);\n    const key = event.target.name\n    copy[key] = event.target.value\n     this.setState({\n      addForm: copy\n    })\n  }   \n\nsubmitTask = (event) => {\n  event.preventDefault()\n  const copy = this.state.list.slice(0)\n  copy.push(this.state.addForm)\n  this.setState({\n    list : copy , addForm: { text:'' }\n  })\n}\n\nclearlist = (event) => {\n  this.setState({list: []});\n}\n\ndeleteTask = (index) => {\n  const copy = this.state.list.slice(0)\n  // remove the item at the index\n  copy.splice(index,1)\n  //delete from copy \n  //setcopy to orginal \n  this.setState({list : copy})\n\n  \n}\n\nrender() {\n\n    const todoList = this.state.list.map((todo, index) => {\n    const num = Math.round( this.state.list.length / 3 ); \n    let part = 1 ; \n\n    let isNewPart = false ; \n\n    if( index > 3 &&  index % num == 0 ){\n        part++ \n        isNewPart = true ; \n    } \n    \n    \n    return <div className={  isNewPart ? \"part\" + part : \"\"}>\n      <Todo todo = {todo} index={index} deleteTask={this.deleteTask}/>\n    </div>\n\n\n      // return <Todo todo = {todo} index={index} deleteTask={this.deleteTask}/>\n\n      \n    })\n    \n    return (\n     \n     <div>\n         <link rel=\"stylesheet\" href=\"button.css\"/>\n       <link href=\"https://fonts.googleapis.com/css?family=Indie+Flower|Kalam\" rel=\"stylesheet\"/>\n       <link href=\"https://fonts.googleapis.com/css?family=Caveat|Sacramento|Shadows+Into+Light\" rel=\"stylesheet\" />\n       <form onSubmit={this.submitTask}>\n       \n       <input type='text' placeholder=\"New Task✒️\" onFocus=\"this.value=''\" name='text' onChange={this.updateForm} value={this.state.addForm.text} />\n       </form>\n       \n      \n       <div class=\"paper\">\n\n          \n          {todoList}\n\n        {/* <div class=\"part1\">\n          <h2>Tasks</h2>\n          { <p><ul>{todoList}</ul></p>  show todoList indexOf(0) to (4) }\n        </div>\n\n        <div class=\"part2\">\n          { <p>  <ul>{todoList}</ul> </p>  show todoList indexOf(5) to (11) }\n        </div>\n\n        <div class=\"part3\">\n          { <p>  <ul>{todoList}</ul> </p>   show todoList indexOf(12) to (16) }\n        </div> */}\n\n        \n\n      </div>\n       <div id=\"contentWrapper\">\n\t\t<div id=\"content\">\n\t\t\t<span id=\"button\" onClick={this.clearlist} >clear all</span>\n\t\t</div>\n\t</div>\n\n       {/* <button onClick={this.clearlist} > clear all </button> */}\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}