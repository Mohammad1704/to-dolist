{"version":3,"sources":["todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","checked","checkedTask","_this","setState","console","log","_this2","this","react_default","a","createElement","onClick","className","props","todo","text","event","deleteTask","index","id","Component","App","addForm","list","updateForm","copy","Object","assign","target","name","value","submitTask","preventDefault","slice","push","clearlist","splice","rel","href","onSubmit","type","placeholder","onChange","chunk","Math","round","length","mod3","temparray","i","concat","map","temp","src_todo","todoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dfe1831.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Todo extends Component {\n\n    state = {\n        checked: 'false'\n    }\n    \n    checkedTask = () =>{\n        if (this.state.checked === 'false'){\n            this.setState({checked:'done'})\n        }else{\n            this.setState({checked:'false'})\n        }\n        console.log(this.state.checked)\n    }\n    \n    \nrender(){\n    return (\n            <div>\n                <li> \n                    <span onClick={this.checkedTask} >◌</span>\n                    <span className={this.state.checked} > {this.props.todo.text}  </span>    \n                    <del  onClick={(event) => {this.props.deleteTask(this.props.index) ; this.setState({checked:'false'})} } ><span id=\"remove\"> ⌫ </span></del>\n               </li>\n            </div>\n    )\n}\n\n}\n\nexport default Todo;","\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./button.css\";\nimport \"./paper.scss\";\nimport Todo from \"./todo\";\nclass App extends Component {\n  state = {\n    addForm: {\n      text: \"\"\n    },\n    list: []\n  };\n\n  updateForm = event => {\n    const copy = Object.assign({}, this.state.addForm);\n    const key = event.target.name;\n    copy[key] = event.target.value;\n    this.setState({\n      addForm: copy\n    });\n  };\n\n  submitTask = event => {\n    console.log(\"submit\");\n    event.preventDefault();\n    const copy = this.state.list.slice(0);\n    copy.push(this.state.addForm);\n    this.setState({\n      list: copy,\n      addForm: { text: \"\" }\n    });\n  };\n\n  clearlist = event => {\n    this.setState({ list: [] });\n  };\n\n  deleteTask = index => {\n    const copy = this.state.list.slice(0);\n    // remove the item at the index\n    copy.splice(index, 1);\n    //delete from copy\n    //setcopy to orginal\n    this.setState({ list: copy });\n  };\n\n  render() {\n    const todoList = () => {\n      // to devide the list into 3 parts \n      let chunk = Math.round(this.state.list.length / 3);\n      const mod3 = this.state.list.length % 3;\n\n      let temparray = [];\n\n      if (this.state.list.length < 3) {\n        chunk = 1;\n      }\n\n      for (let i = 0; i < this.state.list.length; i =  i + chunk) {\n        if (\n          i === this.state.list.length - 1 &&\n          mod3 > 0 &&\n          this.state.list.length > 3\n        ) {\n\n          if(temparray[0])\n          temparray[0] = temparray[0].concat(\n              this.state.list.slice(i, i + chunk + mod3)\n            );\n        } else {\n          temparray.push(this.state.list.slice(i, i + chunk));\n        }\n      }\n\n    // render \n      return temparray.map((temp, index) => {\n        return (\n          <div className={\"part\" + (index + 1)}>\n            {temp.map(todo => (\n              <Todo todo={todo} index={index} deleteTask={this.deleteTask} />\n            ))}\n          </div>\n        );\n      });\n    };\n\n    return (\n      <div>\n        <link rel=\"stylesheet\" href=\"button.css\" />\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Indie+Flower|Kalam\"\n          rel=\"stylesheet\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Caveat|Sacramento|Shadows+Into+Light\"\n          rel=\"stylesheet\"\n        />\n        <form onSubmit={this.submitTask}>\n          <input\n            type=\"text\"\n            placeholder=\"New Task✒️\"\n            name=\"text\"\n            onChange={this.updateForm}\n            value={this.state.addForm.text}\n          />\n        </form>\n\n        <div className=\"paper\">{todoList()}</div>\n        <div id=\"contentWrapper\">\n          <div id=\"content\">\n            <span id=\"button\" onClick={this.clearlist}>\n              clear all\n            </span>\n          </div>\n        </div>\n\n        {/* <button onClick={this.clearlist} > clear all </button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}